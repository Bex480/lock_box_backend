//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.5

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "Videos")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text")]
    pub key: String,
    pub uploaded_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::group_video::Entity")]
    GroupVideo,
}

impl Related<super::group_video::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupVideo.def()
    }
}

impl Related<super::groups::Entity> for Entity {
    fn to() -> RelationDef {
        super::group_video::Relation::Groups.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::group_video::Relation::Videos.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
